name: Build

on:
  # Build on new commits or pull requests.
  push:
    paths-ignore:
      - '**.md'
  pull_request:
  schedule:
    # Run every week just to make sure the CI environment still works.
    - cron: '0 0 * * 0'

env:
  DOTNET_VERSION: 7.0.x

jobs:
  build-ubuntu:
    runs-on: ubuntu-20.04

    # Test building with .NET 6 and .NET 7
    strategy:
      matrix:
        dotnet_version: [6.0.x, 7.0.x]

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{matrix.dotnet_version}}
    - name: Install Apt Dependencies
      run: |
        sudo apt update
        sudo apt install autotools-dev autoconf-archive gettext intltool libgtk-3-dev
    - name: Generate Tarball
      run: |
        ./autogen.sh
        make dist
    - name: Build
      run: |
        ./autogen.sh --prefix ${{ runner.temp }}
        make build
    - name: Test
      run: make test
    - name: Test Install
      run: make install
    - name: Build Installer
      run: make releasezip
    - name: Upload Installer
      uses: actions/upload-artifact@v3
      with:
        name: Pinta-linux-dotnet-${{matrix.dotnet_version}}.zip
        path: pinta-2.2.zip
        if-no-files-found: error

  build-macos:
    runs-on: macos-11

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{env.DOTNET_VERSION}}
    - name: Install Dependencies
      run: brew install gtk+3 adwaita-icon-theme gettext
    - name: Build
      run: dotnet build Pinta.sln -c Release
    - name: Test
      run: dotnet test Pinta.sln -c Release

    - name: Add Cert to Keychain
      if: github.event_name != 'pull_request'
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.MAC_CERTS_BASE64 }}
        p12-password: ${{ secrets.MAC_CERTS_PASSWORD }}

    - name: Build Installer
      if: github.event_name != 'pull_request'
      env:
        MAC_DEV_PASSWORD: ${{ secrets.MAC_DEV_PASSWORD }}
      run: |
        cd installer/macos
        ./build_installer.sh

    - name: Upload Installer
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: "Pinta.dmg"
        path: installer/macos/Pinta.dmg
        if-no-files-found: error

  build-windows:
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v3
    - uses: microsoft/setup-msbuild@v1.3.1
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{env.DOTNET_VERSION}}
    - name: Build
      run: dotnet build Pinta.sln -c Release
    - name: Test
      run: dotnet test Pinta.sln -c Release

    # Note that msgfmt is already available from the Git for Windows installation!
    - name: Build Installer
      run: |
        choco install innosetup -y -v
        dotnet publish Pinta.sln -p:BuildTranslations=true -c Release -r win-x64 --self-contained true
        iscc installer/windows/installer.iss

    - name: Upload Installer
      uses: actions/upload-artifact@v3
      with:
        name: "Pinta.exe"
        path: installer/windows/Pinta.exe
        if-no-files-found: error
